generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  username            String               @unique
  password            String
  role                UserRole             @default(USER)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  residents           Resident[]
}

model Resident {
  id                  Int                  @id @default(autoincrement())
  bahayToroSystemId   String               @unique @default(dbgenerated("concat('BAHAY-TORO-', to_char(nextval('bahay_toro_system_id_seq'::regclass), 'FM00000'::text))"))
  precinctNumber      String?
  firstName           String
  middleName          String?
  lastName            String
  gender              Gender
  birthDate           DateTime
  email               String?
  contact             String
  religion            Religion?
  status              CivilStatus
  sector              Sector?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              Int
  address             Address?
  certificateRequests CertificateRequest[] @relation("UserRequests")
  emergencyContact    EmergencyContact?
  proofOfIdentity     ProofOfIdentity?
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, email])
}

model EmergencyContact {
  id           Int      @id @default(autoincrement())
  residentId   Int      @unique
  name         String
  relationship String
  contact      String
  address      String
  resident     Resident @relation(fields: [residentId], references: [id], onDelete: Cascade)
}

model Address {
  id               Int           @id @default(autoincrement())
  residentId       Int           @unique
  residencyType    ResidencyType
  yearsInBahayToro Int?
  blockLot         String?
  phase            String?
  street           String?
  subdivision      String
  barangay         String        @default("Bahay Toro")
  city             String        @default("Quezon City")
  province         String        @default("Metro Manila")
  resident         Resident      @relation(fields: [residentId], references: [id], onDelete: Cascade)
}

model ProofOfIdentity {
  id                  Int      @id @default(autoincrement())
  residentId          Int      @unique
  signaturePath       String
  idPhoto1Path        String
  idPhoto2Path        String
  holdingIdPhoto1Path String
  holdingIdPhoto2Path String
  resident            Resident @relation(fields: [residentId], references: [id], onDelete: Cascade)
}
model CertificateRequest {
  id              Int               @id @default(autoincrement())
  referenceNumber String            @unique @default(dbgenerated("concat('VVFJ-', to_char(nextval('reference_number_seq'::regclass), 'FM00000'::text))"))
  residentId      Int
  certificateType CertificateType
  purpose         String
  additionalInfo  Json?
  remarks         String?           // For rejection reasons or special notes
  requestDate     DateTime          @default(now())
  status          CertificateStatus @default(PENDING)
  resident        Resident          @relation("UserRequests", fields: [residentId], references: [id], onDelete: Cascade)
  payment         Payment?
}

model Payment {
  id                Int                 @id @default(autoincrement())
  transactionReference String           @unique
  certificateRequestId Int              @unique
  amount            Decimal            @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus      @default(PENDING)
  paymentDate       DateTime?          // Null until payment is confirmed
  receiptNumber     String?            // For official receipts
  notes             String?
  proofOfPaymentPath String?           // Path to uploaded payment proof
  metadata          Json?              // Additional payment details, transaction IDs, etc.
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  certificateRequest CertificateRequest @relation(fields: [certificateRequestId], references: [id], onDelete: Cascade)
}

enum PaymentMethod {
  CASH
  GCASH_DIRECT
  MAYA
  BANK_TRANSFER
  CREDIT_CARD
  OTHER
}

enum PaymentStatus {
  PENDING       // Payment initiated but not confirmed
  SUCCEEDED     // Payment automatically confirmed by payment gateway
  VERIFIED      // Payment manually verified by admin (for cash, checks, etc.)
  REJECTED      // Payment was rejected or failed
  REFUNDED      // Payment was returned to the payer
  WAIVED        // Fee was waived (for seniors, PWDs, etc.)
  CANCELLED     // User cancelled a payment attempt
  EXPIRED       // Payment session/link expired without completion
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  LGBTQ
}

enum CivilStatus {
  SINGLE
  MARRIED
  WIDOW
  LEGALLY_SEPARATED
  LIVING_IN
  SEPARATED
  DIVORCED
}

enum Religion {
  CATHOLIC
  IGLESIA_NI_CRISTO
  AGLIPAY
  BAPTIST
  DATING_DAAN
  ISLAM
  JEHOVAHS_WITNESSES
  OTHERS
}

enum Sector {
  SOLO_PARENT
  PWD
  SENIOR_CITIZEN
  INDIGENT_INDIGENOUS_PEOPLE
}

enum ResidencyType {
  HOME_OWNER
  TENANT
  HELPER
  CONSTRUCTION_WORKER
}

enum CertificateType {
  BARANGAY_CLEARANCE
  BARANGAY_ID
  SOLO_PARENT
  COHABITATION
  GOOD_MORAL
  NO_INCOME
  FIRST_TIME_JOB_SEEKER
  RESIDENCY
  TRANSFER_OF_RESIDENCY
  LIVING_STILL
  BIRTH_FACT
}

enum CertificateStatus {
  PENDING              // Initial submission
  UNDER_REVIEW         // Staff reviewing the request
  AWAITING_PAYMENT     // Request valid, waiting for payment
  PROCESSING           // Certificate is being prepared
  READY_FOR_PICKUP     // Certificate ready for collection
  IN_TRANSIT           // Certificate is being delivered to resident
  COMPLETED            // Certificate delivered/collected
  REJECTED             // Request denied
  CANCELLED            // User cancelled the request
}