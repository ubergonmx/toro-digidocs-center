// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  LGBTQ
}

enum CivilStatus {
  SINGLE
  MARRIED
  WIDOW
  LEGALLY_SEPARATED
  LIVING_IN
  SEPARATED
  DIVORCED
}

enum Religion {
  CATHOLIC
  IGLESIA_NI_CRISTO
  AGLIPAY
  BAPTIST
  DATING_DAAN
  ISLAM
  JEHOVAHS_WITNESSES
  OTHERS
}

enum Sector {
  SOLO_PARENT
  PWD
  SENIOR_CITIZEN
  INDIGENT_INDIGENOUS_PEOPLE
}

enum ResidencyType {
  HOME_OWNER
  TENANT
  HELPER
  CONSTRUCTION_WORKER
}

enum CertificateType {
  BARANGAY_CLEARANCE
  BARANGAY_ID
  SOLO_PARENT
  COHABITATION
  GOOD_MORAL
  NO_INCOME
  FIRST_TIME_JOB_SEEKER
  RESIDENCY
  TRANSFER_OF_RESIDENCY
  LIVING_STILL
  BIRTH_FACT
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resident {
  id                Int         @id @default(autoincrement())
  bahayToroSystemId String      @unique @default(dbgenerated("concat('BAHAY-TORO-', to_char(nextval('bahay_toro_system_id_seq'), 'FM00000'))"))
  precinctNumber    String?
  firstName         String
  middleName        String?
  lastName          String
  gender            Gender
  birthDate         DateTime
  email             String?
  contact           String
  religion          Religion?
  status            CivilStatus
  sector            Sector?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  emergencyContact    EmergencyContact?
  address             Address?
  certificateRequests CertificateRequest[]
  proofOfIdentity     ProofOfIdentity?

  @@unique([id, email])
}

model EmergencyContact {
  id           Int      @id @default(autoincrement())
  residentId   Int      @unique
  name         String
  relationship String
  contact      String
  address      String
  resident     Resident @relation(fields: [residentId], references: [id])
}

model Address {
  id               Int           @id @default(autoincrement())
  residentId       Int           @unique
  residencyType    ResidencyType
  yearsInBahayToro Int?
  blockLot         String?
  phase            String?
  street           String?
  subdivision      String
  barangay         String        @default("Bahay Toro")
  city             String        @default("Quezon City")
  province         String        @default("Metro Manila")
  resident         Resident      @relation(fields: [residentId], references: [id])
}

model CertificateRequest {
  id              Int             @id @default(autoincrement())
  referenceNumber String          @unique @default(dbgenerated("concat('VVFJ-', to_char(nextval('reference_number_seq'), 'FM00000'))"))
  residentId      Int
  certificateType CertificateType
  purpose         String
  additionalInfo  Json?
  requestDate     DateTime        @default(now())
  resident        Resident        @relation(fields: [residentId], references: [id])
}

model ProofOfIdentity {
  id                  Int      @id @default(autoincrement())
  residentId          Int      @unique
  signaturePath       String
  idPhoto1Path        String
  idPhoto2Path        String
  holdingIdPhoto1Path String
  holdingIdPhoto2Path String
  resident            Resident @relation(fields: [residentId], references: [id])
}

// These are used to generate sequential numbers for bahayToroSystemId and referenceNumber
model BahayToroSystemIdSequence {
  id Int @id @default(autoincrement())
}

model ReferenceNumberSequence {
  id Int @id @default(autoincrement())
}
